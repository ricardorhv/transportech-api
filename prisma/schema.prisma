// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transporte {
  id           String   @id @default(uuid())
  placa        String   @unique
  descricao    String
  imagem       String
  dataCadastro DateTime @default(now())
  Viagem       Viagem[]
}

model LocalDeParada {
  id           String            @id @default(uuid())
  descricao    String
  tipo         TipoLocalDeParada
  cidade       String
  dataCadastro DateTime          @default(now())
  Grupo        Grupo[]
}

enum TipoLocalDeParada {
  ORIGEM
  DESTINO
}

model Grupo {
  id              String         @id @default(uuid())
  nome            String
  cidadeOrigem    String
  cidadeDestino   String
  dataCadastro    DateTime       @default(now())
  status          Boolean
  localDeParada   LocalDeParada  @relation(fields: [localDeParadaId], references: [id])
  localDeParadaId String
  Viagem          Viagem[]
  ListaUsuario    ListaUsuario[]
}

model Perfil {
  id        String    @id @default(uuid())
  descricao String
  status    Boolean
  Usuario   Usuario[]
}

model Usuario {
  id                  String          @id @default(uuid())
  documento           String
  nome                String
  sobrenome           String
  email               String
  senha               String
  telefone            String
  status              Boolean
  dataCadatro         DateTime        @default(now())
  perfil              Perfil          @relation(fields: [perfilId], references: [id])
  perfilId            String
  carteiraDeMotorista String?
  ListaPresenca       ListaPresenca[]
  ListaUsuario        ListaUsuario[]
  ListaEndereco       ListaEndereco[]
}

model Viagem {
  id            String          @id @default(uuid())
  dataInicio    DateTime
  dataFinal     DateTime
  tipoViagem    TipoViagem
  status        StatusViagem
  transporte    Transporte      @relation(fields: [transporteId], references: [id])
  grupo         Grupo           @relation(fields: [grupoId], references: [id])
  transporteId  String
  motoristaId   String
  grupoId       String
  ListaPresenca ListaPresenca[]
}

enum StatusViagem {
  AGUARDANDO_INICIO
  EM_ANDAMENTO
  CONCLUIDA
}

enum TipoViagem {
  IDA
  VOLTA
}

model ListaPresenca {
  status    String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  viagem    Viagem  @relation(fields: [viagemId], references: [id])
  usuarioId String
  viagemId  String

  @@id([usuarioId, viagemId])
}

model ListaUsuario {
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  grupo     Grupo   @relation(fields: [grupoId], references: [id])
  usuarioId String
  grupoId   String

  @@id([usuarioId, grupoId])
}

model Endereco {
  id            String          @id @default(uuid())
  logradouro    String
  numero        String
  cidade        String
  status        Boolean
  dataCriacao   DateTime        @default(now())
  bairro        String
  ListaEndereco ListaEndereco[]
}

model ListaEndereco {
  endereco   Endereco @relation(fields: [enderecoId], references: [id])
  enderecoId String
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  usuarioId String

  @@id([enderecoId, usuarioId])
}
